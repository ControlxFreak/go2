#!/bin/bash
# --------------------------------------------------------------------- #
# go2 
# 	A handy tool to quickly navigate to commonly used, nicknamed
# 	directories.  This tool utilizes the accompanying nickname 
# 	tool to generate a .config/nickname.conf file to store its 
# 	nickname -> directory relationships.
#
# Anthony Trezza
# 12 March 2018
# anthony<delete_this>.t<remove_this>.trezza<destroy_this>@gmail.com
#
# License:
#      MIT License
#	
#	Copyright (c) 2018 Anthony Trezza
#
#	Permission is hereby granted, free of charge, to any person 
#	obtaining a copy of this software and associated documentation 
#	files (the "Software"), to deal in the Software without restriction,
#	including without limitation the rights	to use, copy, modify, merge,
#	publish, distribute, sublicense, and/or sell copies of the Software, 
#	and to permit persons to whom the Software is furnished to do so, 
#	subject to the following conditions:
#	
#	The above copyright notice and this permission notice shall be 
#	included in all	copies or substantial portions of the Software.
#
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
#	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
#	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
#	NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS 
#	BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN 
#	ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
#	CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#	SOFTWARE.
# 
#
# Change Log:
#       - 15 March 2018 trezza go2's birthday! <(^.^)>
#       - 08 May 2018 trezza converted to getopts.  Super handy!
#       - 11 May 2018 trezza fixed bug issue 4 -> couldn't use getopts twice
#       - 18 May 2018 trezza moved everything to a function so variables do not
#         remain persistent in the current bash.
#       - 01 June 2018 trezza moved #!/bin/bash to first line per bug #8 and #5
#       - 01 June 2018 trezza now check $XDG_CONFIG_HOME instead of $HOME/.config
#	- 01 June 2018 trezza fixed bug #7, printed bash instead of go2
# TODO:
# 	- Input checking
# 	- Delete a nickname
# 	- Directory searching if no nickname found
# 	- go2 <directory> <- basically acting just like a cd wrapper
# --------------------------------------------------------------------- #
# 11  May 2018 fix for bug issue 4 -> couldn't use getopts twice. 
OPTIND=1

function usage() {
	echo "Usage:"
	echo "   go2 [-hp]"
	echo "   go2 mynickname"
	echo "	 go2 -n nickname"
	echo "	 go2 -n nickname -d <path/to/directory>"
	echo "   -h Display Help."
	echo "   -p Print the contents of the nickname file to the console." 
	echo "   -n Create a nickname association for the given directory."
	echo "   -d Directory you wish to nickname [default=pwd]"
} # usage()

function help() {
	echo "go2:"
	echo "  A handy tool for quick navigation to commonly used, nicknamed"
	echo "	directories.  This tool utilizes the accompanying 'nickname'"
	echo "  tool to generate a nickname.conf file to store its"
	echo "  nickname->directory mappings."
	echo "  The main benefits of utilizing go2 over either aliasing cd"
	echo "  directories or creating enviornment variables is that everything"
	echo "  is self contained in an easy to use, view and modify" 
	echo "  configuration file."
	echo ""
	usage	
	echo ""
	echo "Example:"
	echo "   To nickname the directory '$HOME/bin/repo' as 'myrepo'"
	echo "      $0 -n myrepo -d $HOME/bin/repo"
	echo "   or"
	echo "      nickname -d $HOME/bin/repo myrepo"
	echo "   To change directories to '$HOME/bin/repo' using the 'myrepo' nickname"
	echo "      $0 myrepo"
	echo "   To see the contents of the nickname file"
	echo "      $0 -p"
	echo "   or"
	echo "      nickname -p"
} # help()

function execute() {
	# Grab the input arguments and cast them to familiar names
	NICKNAME=$1
	CONFILE=$2
	SUCCESS=0
	while IFS='' read -r line || [[ -n "$line" ]]; do
  
		index=0
       		for entry in $(echo $line | sed "s/,/ /g"); do
                	if [ $index == 0 ]; then
                       		ENTRY_NN="$entry"
                	elif [ $index == 1 ]; then
                        	ENTRY_DIR="$entry"
                	fi
                	((index = index + 1))
        	done

        	if [ "$ENTRY_NN" == "$NICKNAME" ]; then
	                if [ -d "$ENTRY_DIR" ]; then
                        	echo "cd: $ENTRY_DIR"
                        	cd $(echo "$ENTRY_DIR" | tr -d '\r')
				SUCCESS=1
                        	return $SUCCESS	
                	else
                       		echo "Error: Nickname Mapping to an invalid directory "
                        	echo "$ENTRY_NN -> $ENTRY_DIR"
				echo "TODO: Delete?"
				SUCCESS=1 # even though not really, just dont want that error message to pop up bellow
                        	return $SUCCESS	
                	fi
        	fi
	done < "$CONFILE"
	return $SUCCESS
} # execute()

function run_go2() {
	# 0. Define important variables 
	if [ ! -z "$XDG_CONFIG_HOME" ]; then
		CONFDIR="$XDG_CONFIG_HOME/nickname"
	else
		CONFDIR="$HOME/.config/nickname"
	fi

	CONFILE="$CONFDIR/nickname.conf"
	CREATENICKNAME=false
	DELETENICKNAME=false # UNSUPPORTED YET
	NICKNAMEDIR=$(pwd)
	NICKNAME=""


	# 2. Parse the inputs
	while getopts ":hpn:d:" opt; do
		case ${opt} in
			h )
			   help
			   return 
			   ;;
			p )	
			   nickname -p
			   return 
			   ;;
			n )
			   NICKNAME=${OPTARG}
			   CREATENICKNAME=true
			   ;;
			d )
			   NICKNAMEDIR=${OPTARG}
			   if [ ! -d "$NICKNAMEDIR" ]; then
				 echo "Input Nickname Dirctory: $NICKNAMEDIR Does Not Exist"
				 return 
			   fi
			   ;;
			\? )
			   echo "Invalid Input: -$OPTARG"
			   usage
			   return 
			   ;;
			: )
			   echo "Invalid Option: -$OPTARG requires an argument"
			   usage
			   return 
			   ;;
		esac
	done
	shift $((OPTIND -1))	

	# 3. If we received either the -n or -r commands, execute them!
	if [ "$CREATENICKNAME" = true ] ; then
		nickname -d $NICKNAMEDIR $NICKNAME
		return	
	fi

	if [ "$DELETENICKNAME" = true ] ; then
		echo "TODO"
		return	
	fi

	# 4. Yippie! we are going to a directory.  That means the nickname should be the first input
	if [ -z "$1" ] ; then
		echo "Invalid nickname $1."
		return	
	fi

	NICKNAME=$1

	# 5. verify that this nickname is mapped to a directory in the config file and execute
	execute "$NICKNAME" "$CONFILE"
	SUCCESS=$?

	# 6. If we got here, we didn't find any directories with that nickname
	if [ $SUCCESS = 0 ] ; then
		echo "No directories found with that nickname."
		echo "Possible nicknames:"
		nickname -p
	fi
} # run

# --------------------------------------------------------------- #
# MAIN 
# --------------------------------------------------------------- #

# 0. Check the number of inputs
if [ "$#" -eq 0 ]; then
	echo "No Input Provided."
	usage
	return	
fi

# 1. Run go2!
run_go2 "$@"
